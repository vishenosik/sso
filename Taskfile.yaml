version: "3"

dotenv: ['.env']

tasks:

  # RUN

  run-local:
    desc: Run main application
    cmd: go run ./cmd/sso

  run-container:
    desc: "Run sso containered server"
    cmd: $CONTAINER_ENGINE compose -f ./deploy/compose/sso-app.compose.yaml up -d --build
  
  dev:
    desc: Build and start app with hot reload
    deps: [build-local]
    silent: true
    watch: true
    cmd: ./bin/main {{.FLAG_CONFIG}}
    sources: 
      - ./*.go,
      - ./**/*.go

  # BUILD

  build-local:
    desc: Builds application
    cmds:
      - 'go build -o bin/ ./cmd/sso/main.go'
    sources:
      - ./*.go,
      - ./**/*.go

  build-container:
    desc: Build Docker image
    cmd: '$CONTAINER_ENGINE build -t sso-app . -f ./deploy/sso-app.Dockerfile'

  copy-bin:
    desc: copy binary from sso-app image to local storage
    deps:
      - build-container
    cmds:
      - '$CONTAINER_ENGINE create --name extract sso-app'
      - '$CONTAINER_ENGINE cp extract:/app/main ./bin/main'
      - '$CONTAINER_ENGINE rm extract'

  # TEST

  test:
    desc: Test all packages
    cmd: sh scripts/testing.sh $COVERAGE_FILE
  
  test-coverage:
    desc: Generates coverage html after testing
    aliases: [cover]
    deps:
      - test
    cmd: go tool cover -html="$COVERAGE_FILE"

  bench:
    desc: Run benchmarks
    cmd: go test -bench . -benchmem ./internal/lib/collections -cpuprofile=./profiles/cpu.out -memprofile=./profiles/mem.out

  prof:
    desc: Use pprof 
    cmds:
      - go tool pprof --pdf ./profiles/cpu.out > ./profiles/cpu-prof.pdf
      - go tool pprof --pdf ./profiles/mem.out > ./profiles/mem-prof.pdf 

  mock:
    desc: Generates all mocks
    cmd: mockery --config=./tools/testing/.mockery.yml

  # TOOLS

  lint:
    desc: Lint all files
    cmd: fieldalignment -fix $INTERNAL_WILDCARD
    ignore_error: true
      
  graph:
    desc: Generate dependency graph in pdf
    cmd: go mod graph | modgraphviz | dot -Tpdf -o graph.pdf

  security:
    desc: Run security checks
    cmds:
      - gosec ./...

  # DOCS

  docs:
    desc: Generate docs
    env:
      SWAG: swag init -g ./cmd/sso/main.go
    cmds:
      # make internal docs (go-based)
      - $SWAG -o ./internal/gen/swagger --ot go
      # make sdk docs (json,yaml)
      - $SWAG -o ./sso-sdk/swagger --ot json,yaml --instanceName sso_swagger
      # make env example
      - go run ./cmd/sso/main.go --config.doc=./docs/example.env

  # SECURITY


  generate_hmac_key:
    desc: Generate hmac_secret_file used to configure dgraph secrets so far
    aliases: [gen-hmac]
    cmd: tr -dc 'a-zA-Z0-9' < /dev/urandom | dd bs=1 count=32 of=./deploy/compose/dgraph/acl/hmac_secret