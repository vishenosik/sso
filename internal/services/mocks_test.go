// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/vishenosik/sso/internal/entities"
)

// NewMockUserSaver creates a new instance of MockUserSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSaver {
	mock := &MockUserSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserSaver is an autogenerated mock type for the UserSaver type
type MockUserSaver struct {
	mock.Mock
}

type MockUserSaver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserSaver) EXPECT() *MockUserSaver_Expecter {
	return &MockUserSaver_Expecter{mock: &_m.Mock}
}

// SaveUser provides a mock function for the type MockUserSaver
func (_mock *MockUserSaver) SaveUser(ctx context.Context, user *entities.UserCreds) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.UserCreds) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserSaver_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUserSaver_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.UserCreds
func (_e *MockUserSaver_Expecter) SaveUser(ctx interface{}, user interface{}) *MockUserSaver_SaveUser_Call {
	return &MockUserSaver_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *MockUserSaver_SaveUser_Call) Run(run func(ctx context.Context, user *entities.UserCreds)) *MockUserSaver_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.UserCreds
		if args[1] != nil {
			arg1 = args[1].(*entities.UserCreds)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserSaver_SaveUser_Call) Return(err error) *MockUserSaver_SaveUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserSaver_SaveUser_Call) RunAndReturn(run func(ctx context.Context, user *entities.UserCreds) error) *MockUserSaver_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserProvider creates a new instance of MockUserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserProvider {
	mock := &MockUserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserProvider is an autogenerated mock type for the UserProvider type
type MockUserProvider struct {
	mock.Mock
}

type MockUserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserProvider) EXPECT() *MockUserProvider_Expecter {
	return &MockUserProvider_Expecter{mock: &_m.Mock}
}

// IsAdmin provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) IsAdmin(ctx context.Context, userID string) (bool, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserProvider_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type MockUserProvider_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserProvider_Expecter) IsAdmin(ctx interface{}, userID interface{}) *MockUserProvider_IsAdmin_Call {
	return &MockUserProvider_IsAdmin_Call{Call: _e.mock.On("IsAdmin", ctx, userID)}
}

func (_c *MockUserProvider_IsAdmin_Call) Run(run func(ctx context.Context, userID string)) *MockUserProvider_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserProvider_IsAdmin_Call) Return(isAdmin bool, err error) *MockUserProvider_IsAdmin_Call {
	_c.Call.Return(isAdmin, err)
	return _c
}

func (_c *MockUserProvider_IsAdmin_Call) RunAndReturn(run func(ctx context.Context, userID string) (bool, error)) *MockUserProvider_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) UserByEmail(ctx context.Context, email string) (*entities.UserCreds, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 *entities.UserCreds
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.UserCreds, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.UserCreds); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserCreds)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserProvider_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockUserProvider_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserProvider_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockUserProvider_UserByEmail_Call {
	return &MockUserProvider_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockUserProvider_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserProvider_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserProvider_UserByEmail_Call) Return(user *entities.UserCreds, err error) *MockUserProvider_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserProvider_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*entities.UserCreds, error)) *MockUserProvider_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppProvider creates a new instance of MockAppProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppProvider {
	mock := &MockAppProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAppProvider is an autogenerated mock type for the AppProvider type
type MockAppProvider struct {
	mock.Mock
}

type MockAppProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppProvider) EXPECT() *MockAppProvider_Expecter {
	return &MockAppProvider_Expecter{mock: &_m.Mock}
}

// AppByID provides a mock function for the type MockAppProvider
func (_mock *MockAppProvider) AppByID(ctx context.Context, appID string) (*entities.App, error) {
	ret := _mock.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for AppByID")
	}

	var r0 *entities.App
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.App, error)); ok {
		return returnFunc(ctx, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.App); ok {
		r0 = returnFunc(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.App)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppProvider_AppByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppByID'
type MockAppProvider_AppByID_Call struct {
	*mock.Call
}

// AppByID is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *MockAppProvider_Expecter) AppByID(ctx interface{}, appID interface{}) *MockAppProvider_AppByID_Call {
	return &MockAppProvider_AppByID_Call{Call: _e.mock.On("AppByID", ctx, appID)}
}

func (_c *MockAppProvider_AppByID_Call) Run(run func(ctx context.Context, appID string)) *MockAppProvider_AppByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAppProvider_AppByID_Call) Return(app *entities.App, err error) *MockAppProvider_AppByID_Call {
	_c.Call.Return(app, err)
	return _c
}

func (_c *MockAppProvider_AppByID_Call) RunAndReturn(run func(ctx context.Context, appID string) (*entities.App, error)) *MockAppProvider_AppByID_Call {
	_c.Call.Return(run)
	return _c
}
