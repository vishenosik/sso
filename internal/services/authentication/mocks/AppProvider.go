// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/vishenosik/sso/internal/store/models"
	mock "github.com/stretchr/testify/mock"
)

// AppProvider is an autogenerated mock type for the AppProvider type
type AppProvider struct {
	mock.Mock
}

// App provides a mock function with given fields: ctx, appID
func (_m *AppProvider) App(ctx context.Context, appID string) (models.App, error) {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for App")
	}

	var r0 models.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.App, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.App); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Get(0).(models.App)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppProvider creates a new instance of AppProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppProvider {
	mock := &AppProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
